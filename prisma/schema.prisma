generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String     @unique(map: "Course.id_unique") @default(cuid())
  year        Int
  semester    Semester
  subject     String
  crse        String
  title       String
  description String?
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  prereqs     String?
  offered     Semester[]
  fromCredits Float      @default(0)
  toCredits   Float      @default(0)
  sections    Section[]

  @@id([year, semester, subject, crse])
  @@index([deletedAt], map: "Course.deletedAt_index")
  @@index([updatedAt], map: "Course.updatedAt_index")
}

model TransferCourse {
  id               String   @unique(map: "TransferCourse.id_unique") @default(cuid())
  fromCollege      String
  fromCollegeState String
  fromCRSE         String
  fromSubject      String
  fromCredits      Float
  toCRSE           String
  toSubject        String
  toCredits        Float
  title            String
  updatedAt        DateTime @default(now()) @updatedAt

  @@id([fromCollege, fromCRSE, fromSubject, toCRSE, toSubject, toCredits])
}

model Building {
  name      String    @id
  lat       Float
  lon       Float
  shortName String
  Section   Section[]
}

model Section {
  id             String       @id @default(cuid())
  courseId       String
  crn            String
  section        String
  cmp            String
  minCredits     Float
  maxCredits     Float
  time           Json
  totalSeats     Int
  takenSeats     Int
  availableSeats Int
  fee            Int
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  room           String?
  buildingName   String?
  locationType   LocationType @default(PHYSICAL)
  building       Building?    @relation(fields: [buildingName], references: [name])
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructors    Instructor[]

  @@index([deletedAt], map: "Section.deletedAt_index")
  @@index([updatedAt], map: "Section.updatedAt_index")
}

model Instructor {
  id                      Int       @id @default(autoincrement())
  fullName                String    @unique(map: "Instructor.fullName_unique")
  departments             String[]
  email                   String?
  phone                   String?
  office                  String?
  websiteURL              String?
  photoURL                String?
  interests               String[]
  occupations             String[]
  updatedAt               DateTime  @updatedAt
  deletedAt               DateTime?
  averageDifficultyRating Float?
  averageRating           Float?
  numRatings              Int?
  rmpId                   String?
  sections                Section[]

  @@index([deletedAt], map: "Instructor.deletedAt_index")
  @@index([updatedAt], map: "Instructor.updatedAt_index")
}

model PassFailDrop {
  courseSubject String
  courseCrse    String
  year          Int
  semester      Semester
  section       String
  failed        Int
  dropped       Int
  total         Int

  @@id([courseSubject, courseCrse, year, semester, section])
}

enum Semester {
  FALL
  SPRING
  SUMMER
}

enum LocationType {
  PHYSICAL
  ONLINE
  REMOTE
  UNKNOWN
}
