/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type LocationType = 'ONLINE' | 'PHYSICAL' | 'REMOTE' | 'UNKNOWN';
  export namespace every {
    export type LocationType = ['ONLINE', 'PHYSICAL', 'REMOTE', 'UNKNOWN'];
  }
  export type Semester = 'FALL' | 'SPRING' | 'SUMMER';
  export namespace every {
    export type Semester = ['FALL', 'SPRING', 'SUMMER'];
  }

  /* --- tables --- */

  /**
   * **_InstructorToSection**
   * - Table in database
   */
  export namespace _InstructorToSection {
    export type Table = '_InstructorToSection';
    export interface Selectable {
      /**
      * **_InstructorToSection.A**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      A: number;
      /**
      * **_InstructorToSection.B**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      B: string;
    }
    export interface JSONSelectable {
      /**
      * **_InstructorToSection.A**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      A: number;
      /**
      * **_InstructorToSection.B**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      B: string;
    }
    export interface Whereable {
      /**
      * **_InstructorToSection.A**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      A?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **_InstructorToSection.B**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      B?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **_InstructorToSection.A**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      A: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **_InstructorToSection.B**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      B: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **_InstructorToSection.A**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      A?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **_InstructorToSection.B**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      B?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = '_InstructorToSection_AB_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **_prisma_migrations**
   * - Table in database
   */
  export namespace _prisma_migrations {
    export type Table = '_prisma_migrations';
    export interface Selectable {
      /**
      * **_prisma_migrations.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **_prisma_migrations.checksum**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      checksum: string;
      /**
      * **_prisma_migrations.finished_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      finished_at: Date | null;
      /**
      * **_prisma_migrations.migration_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      migration_name: string;
      /**
      * **_prisma_migrations.logs**
      * - `text` in database
      * - Nullable, no default
      */
      logs: string | null;
      /**
      * **_prisma_migrations.rolled_back_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      rolled_back_at: Date | null;
      /**
      * **_prisma_migrations.started_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      started_at: Date;
      /**
      * **_prisma_migrations.applied_steps_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      applied_steps_count: number;
    }
    export interface JSONSelectable {
      /**
      * **_prisma_migrations.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **_prisma_migrations.checksum**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      checksum: string;
      /**
      * **_prisma_migrations.finished_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      finished_at: db.TimestampTzString | null;
      /**
      * **_prisma_migrations.migration_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      migration_name: string;
      /**
      * **_prisma_migrations.logs**
      * - `text` in database
      * - Nullable, no default
      */
      logs: string | null;
      /**
      * **_prisma_migrations.rolled_back_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      rolled_back_at: db.TimestampTzString | null;
      /**
      * **_prisma_migrations.started_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      started_at: db.TimestampTzString;
      /**
      * **_prisma_migrations.applied_steps_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      applied_steps_count: number;
    }
    export interface Whereable {
      /**
      * **_prisma_migrations.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **_prisma_migrations.checksum**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      checksum?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **_prisma_migrations.finished_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      finished_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **_prisma_migrations.migration_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      migration_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **_prisma_migrations.logs**
      * - `text` in database
      * - Nullable, no default
      */
      logs?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **_prisma_migrations.rolled_back_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      rolled_back_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **_prisma_migrations.started_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **_prisma_migrations.applied_steps_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      applied_steps_count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **_prisma_migrations.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **_prisma_migrations.checksum**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      checksum: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **_prisma_migrations.finished_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      finished_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **_prisma_migrations.migration_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      migration_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **_prisma_migrations.logs**
      * - `text` in database
      * - Nullable, no default
      */
      logs?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **_prisma_migrations.rolled_back_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      rolled_back_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **_prisma_migrations.started_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **_prisma_migrations.applied_steps_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      applied_steps_count?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **_prisma_migrations.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **_prisma_migrations.checksum**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      checksum?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **_prisma_migrations.finished_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      finished_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **_prisma_migrations.migration_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      migration_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **_prisma_migrations.logs**
      * - `text` in database
      * - Nullable, no default
      */
      logs?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **_prisma_migrations.rolled_back_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      rolled_back_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **_prisma_migrations.started_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **_prisma_migrations.applied_steps_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      applied_steps_count?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = '_prisma_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Building**
   * - Table in database
   */
  export namespace Building {
    export type Table = 'Building';
    export interface Selectable {
      /**
      * **Building.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **Building.lat**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      lat: number;
      /**
      * **Building.lon**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      lon: number;
      /**
      * **Building.shortName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      shortName: string;
    }
    export interface JSONSelectable {
      /**
      * **Building.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **Building.lat**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      lat: number;
      /**
      * **Building.lon**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      lon: number;
      /**
      * **Building.shortName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      shortName: string;
    }
    export interface Whereable {
      /**
      * **Building.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Building.lat**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      lat?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Building.lon**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      lon?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Building.shortName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      shortName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Building.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Building.lat**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      lat: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Building.lon**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      lon: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Building.shortName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      shortName: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Building.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Building.lat**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      lat?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Building.lon**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      lon?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Building.shortName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      shortName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'Building_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Course**
   * - Table in database
   */
  export namespace Course {
    export type Table = 'Course';
    export interface Selectable {
      /**
      * **Course.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **Course.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year: number;
      /**
      * **Course.semester**
      * - `Semester` in database
      * - `NOT NULL`, no default
      */
      semester: Semester;
      /**
      * **Course.subject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subject: string;
      /**
      * **Course.crse**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      crse: string;
      /**
      * **Course.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Course.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **Course.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt: Date;
      /**
      * **Course.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt: Date | null;
      /**
      * **Course.prereqs**
      * - `text` in database
      * - Nullable, no default
      */
      prereqs: string | null;
      /**
      * **Course.offered**
      * - `_Semester` in database
      * - Nullable, no default
      */
      offered: Semester[] | null;
      /**
      * **Course.minCredits**
      * - `float8` in database
      * - `NOT NULL`, default: `0`
      */
      minCredits: number;
      /**
      * **Course.maxCredits**
      * - `float8` in database
      * - `NOT NULL`, default: `0`
      */
      maxCredits: number;
    }
    export interface JSONSelectable {
      /**
      * **Course.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **Course.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year: number;
      /**
      * **Course.semester**
      * - `Semester` in database
      * - `NOT NULL`, no default
      */
      semester: Semester;
      /**
      * **Course.subject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subject: string;
      /**
      * **Course.crse**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      crse: string;
      /**
      * **Course.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Course.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **Course.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt: db.TimestampString;
      /**
      * **Course.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt: db.TimestampString | null;
      /**
      * **Course.prereqs**
      * - `text` in database
      * - Nullable, no default
      */
      prereqs: string | null;
      /**
      * **Course.offered**
      * - `_Semester` in database
      * - Nullable, no default
      */
      offered: Semester[] | null;
      /**
      * **Course.minCredits**
      * - `float8` in database
      * - `NOT NULL`, default: `0`
      */
      minCredits: number;
      /**
      * **Course.maxCredits**
      * - `float8` in database
      * - `NOT NULL`, default: `0`
      */
      maxCredits: number;
    }
    export interface Whereable {
      /**
      * **Course.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.semester**
      * - `Semester` in database
      * - `NOT NULL`, no default
      */
      semester?: Semester | db.Parameter<Semester> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Semester | db.Parameter<Semester> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.subject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.crse**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      crse?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.prereqs**
      * - `text` in database
      * - Nullable, no default
      */
      prereqs?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.offered**
      * - `_Semester` in database
      * - Nullable, no default
      */
      offered?: Semester[] | db.Parameter<Semester[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Semester[] | db.Parameter<Semester[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.minCredits**
      * - `float8` in database
      * - `NOT NULL`, default: `0`
      */
      minCredits?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Course.maxCredits**
      * - `float8` in database
      * - `NOT NULL`, default: `0`
      */
      maxCredits?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Course.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **Course.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Course.semester**
      * - `Semester` in database
      * - `NOT NULL`, no default
      */
      semester: Semester | db.Parameter<Semester> | db.SQLFragment;
      /**
      * **Course.subject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subject: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Course.crse**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      crse: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Course.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Course.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Course.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **Course.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Course.prereqs**
      * - `text` in database
      * - Nullable, no default
      */
      prereqs?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Course.offered**
      * - `_Semester` in database
      * - Nullable, no default
      */
      offered?: Semester[] | db.Parameter<Semester[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Course.minCredits**
      * - `float8` in database
      * - `NOT NULL`, default: `0`
      */
      minCredits?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Course.maxCredits**
      * - `float8` in database
      * - `NOT NULL`, default: `0`
      */
      maxCredits?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Course.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **Course.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Course.semester**
      * - `Semester` in database
      * - `NOT NULL`, no default
      */
      semester?: Semester | db.Parameter<Semester> | db.SQLFragment | db.SQLFragment<any, Semester | db.Parameter<Semester> | db.SQLFragment>;
      /**
      * **Course.subject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Course.crse**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      crse?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Course.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Course.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Course.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Course.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Course.prereqs**
      * - `text` in database
      * - Nullable, no default
      */
      prereqs?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Course.offered**
      * - `_Semester` in database
      * - Nullable, no default
      */
      offered?: Semester[] | db.Parameter<Semester[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, Semester[] | db.Parameter<Semester[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Course.minCredits**
      * - `float8` in database
      * - `NOT NULL`, default: `0`
      */
      minCredits?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Course.maxCredits**
      * - `float8` in database
      * - `NOT NULL`, default: `0`
      */
      maxCredits?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Course.id_unique' | 'Course_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Instructor**
   * - Table in database
   */
  export namespace Instructor {
    export type Table = 'Instructor';
    export interface Selectable {
      /**
      * **Instructor.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Instructor_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Instructor.fullName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fullName: string;
      /**
      * **Instructor.departments**
      * - `_text` in database
      * - Nullable, no default
      */
      departments: string[] | null;
      /**
      * **Instructor.email**
      * - `text` in database
      * - Nullable, no default
      */
      email: string | null;
      /**
      * **Instructor.phone**
      * - `text` in database
      * - Nullable, no default
      */
      phone: string | null;
      /**
      * **Instructor.office**
      * - `text` in database
      * - Nullable, no default
      */
      office: string | null;
      /**
      * **Instructor.websiteURL**
      * - `text` in database
      * - Nullable, no default
      */
      websiteURL: string | null;
      /**
      * **Instructor.photoURL**
      * - `text` in database
      * - Nullable, no default
      */
      photoURL: string | null;
      /**
      * **Instructor.interests**
      * - `_text` in database
      * - Nullable, no default
      */
      interests: string[] | null;
      /**
      * **Instructor.occupations**
      * - `_text` in database
      * - Nullable, no default
      */
      occupations: string[] | null;
      /**
      * **Instructor.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt: Date;
      /**
      * **Instructor.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt: Date | null;
      /**
      * **Instructor.averageDifficultyRating**
      * - `float8` in database
      * - Nullable, no default
      */
      averageDifficultyRating: number | null;
      /**
      * **Instructor.averageRating**
      * - `float8` in database
      * - Nullable, no default
      */
      averageRating: number | null;
      /**
      * **Instructor.numRatings**
      * - `int4` in database
      * - Nullable, no default
      */
      numRatings: number | null;
      /**
      * **Instructor.rmpId**
      * - `text` in database
      * - Nullable, no default
      */
      rmpId: string | null;
    }
    export interface JSONSelectable {
      /**
      * **Instructor.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Instructor_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Instructor.fullName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fullName: string;
      /**
      * **Instructor.departments**
      * - `_text` in database
      * - Nullable, no default
      */
      departments: string[] | null;
      /**
      * **Instructor.email**
      * - `text` in database
      * - Nullable, no default
      */
      email: string | null;
      /**
      * **Instructor.phone**
      * - `text` in database
      * - Nullable, no default
      */
      phone: string | null;
      /**
      * **Instructor.office**
      * - `text` in database
      * - Nullable, no default
      */
      office: string | null;
      /**
      * **Instructor.websiteURL**
      * - `text` in database
      * - Nullable, no default
      */
      websiteURL: string | null;
      /**
      * **Instructor.photoURL**
      * - `text` in database
      * - Nullable, no default
      */
      photoURL: string | null;
      /**
      * **Instructor.interests**
      * - `_text` in database
      * - Nullable, no default
      */
      interests: string[] | null;
      /**
      * **Instructor.occupations**
      * - `_text` in database
      * - Nullable, no default
      */
      occupations: string[] | null;
      /**
      * **Instructor.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt: db.TimestampString;
      /**
      * **Instructor.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt: db.TimestampString | null;
      /**
      * **Instructor.averageDifficultyRating**
      * - `float8` in database
      * - Nullable, no default
      */
      averageDifficultyRating: number | null;
      /**
      * **Instructor.averageRating**
      * - `float8` in database
      * - Nullable, no default
      */
      averageRating: number | null;
      /**
      * **Instructor.numRatings**
      * - `int4` in database
      * - Nullable, no default
      */
      numRatings: number | null;
      /**
      * **Instructor.rmpId**
      * - `text` in database
      * - Nullable, no default
      */
      rmpId: string | null;
    }
    export interface Whereable {
      /**
      * **Instructor.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Instructor_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.fullName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fullName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.departments**
      * - `_text` in database
      * - Nullable, no default
      */
      departments?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.email**
      * - `text` in database
      * - Nullable, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.phone**
      * - `text` in database
      * - Nullable, no default
      */
      phone?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.office**
      * - `text` in database
      * - Nullable, no default
      */
      office?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.websiteURL**
      * - `text` in database
      * - Nullable, no default
      */
      websiteURL?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.photoURL**
      * - `text` in database
      * - Nullable, no default
      */
      photoURL?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.interests**
      * - `_text` in database
      * - Nullable, no default
      */
      interests?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.occupations**
      * - `_text` in database
      * - Nullable, no default
      */
      occupations?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.averageDifficultyRating**
      * - `float8` in database
      * - Nullable, no default
      */
      averageDifficultyRating?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.averageRating**
      * - `float8` in database
      * - Nullable, no default
      */
      averageRating?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.numRatings**
      * - `int4` in database
      * - Nullable, no default
      */
      numRatings?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Instructor.rmpId**
      * - `text` in database
      * - Nullable, no default
      */
      rmpId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Instructor.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Instructor_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.fullName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fullName: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Instructor.departments**
      * - `_text` in database
      * - Nullable, no default
      */
      departments?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.email**
      * - `text` in database
      * - Nullable, no default
      */
      email?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.phone**
      * - `text` in database
      * - Nullable, no default
      */
      phone?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.office**
      * - `text` in database
      * - Nullable, no default
      */
      office?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.websiteURL**
      * - `text` in database
      * - Nullable, no default
      */
      websiteURL?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.photoURL**
      * - `text` in database
      * - Nullable, no default
      */
      photoURL?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.interests**
      * - `_text` in database
      * - Nullable, no default
      */
      interests?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.occupations**
      * - `_text` in database
      * - Nullable, no default
      */
      occupations?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.averageDifficultyRating**
      * - `float8` in database
      * - Nullable, no default
      */
      averageDifficultyRating?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.averageRating**
      * - `float8` in database
      * - Nullable, no default
      */
      averageRating?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.numRatings**
      * - `int4` in database
      * - Nullable, no default
      */
      numRatings?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Instructor.rmpId**
      * - `text` in database
      * - Nullable, no default
      */
      rmpId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Instructor.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Instructor_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.fullName**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fullName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Instructor.departments**
      * - `_text` in database
      * - Nullable, no default
      */
      departments?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.email**
      * - `text` in database
      * - Nullable, no default
      */
      email?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.phone**
      * - `text` in database
      * - Nullable, no default
      */
      phone?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.office**
      * - `text` in database
      * - Nullable, no default
      */
      office?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.websiteURL**
      * - `text` in database
      * - Nullable, no default
      */
      websiteURL?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.photoURL**
      * - `text` in database
      * - Nullable, no default
      */
      photoURL?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.interests**
      * - `_text` in database
      * - Nullable, no default
      */
      interests?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.occupations**
      * - `_text` in database
      * - Nullable, no default
      */
      occupations?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.averageDifficultyRating**
      * - `float8` in database
      * - Nullable, no default
      */
      averageDifficultyRating?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.averageRating**
      * - `float8` in database
      * - Nullable, no default
      */
      averageRating?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.numRatings**
      * - `int4` in database
      * - Nullable, no default
      */
      numRatings?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Instructor.rmpId**
      * - `text` in database
      * - Nullable, no default
      */
      rmpId?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Instructor.fullName_unique' | 'Instructor_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **PassFailDrop**
   * - Table in database
   */
  export namespace PassFailDrop {
    export type Table = 'PassFailDrop';
    export interface Selectable {
      /**
      * **PassFailDrop.courseSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseSubject: string;
      /**
      * **PassFailDrop.courseCrse**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseCrse: string;
      /**
      * **PassFailDrop.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year: number;
      /**
      * **PassFailDrop.semester**
      * - `Semester` in database
      * - `NOT NULL`, no default
      */
      semester: Semester;
      /**
      * **PassFailDrop.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section: string;
      /**
      * **PassFailDrop.failed**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      failed: number;
      /**
      * **PassFailDrop.dropped**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      dropped: number;
      /**
      * **PassFailDrop.total**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      total: number;
    }
    export interface JSONSelectable {
      /**
      * **PassFailDrop.courseSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseSubject: string;
      /**
      * **PassFailDrop.courseCrse**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseCrse: string;
      /**
      * **PassFailDrop.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year: number;
      /**
      * **PassFailDrop.semester**
      * - `Semester` in database
      * - `NOT NULL`, no default
      */
      semester: Semester;
      /**
      * **PassFailDrop.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section: string;
      /**
      * **PassFailDrop.failed**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      failed: number;
      /**
      * **PassFailDrop.dropped**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      dropped: number;
      /**
      * **PassFailDrop.total**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      total: number;
    }
    export interface Whereable {
      /**
      * **PassFailDrop.courseSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseSubject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **PassFailDrop.courseCrse**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseCrse?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **PassFailDrop.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **PassFailDrop.semester**
      * - `Semester` in database
      * - `NOT NULL`, no default
      */
      semester?: Semester | db.Parameter<Semester> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Semester | db.Parameter<Semester> | db.SQLFragment | db.ParentColumn>;
      /**
      * **PassFailDrop.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **PassFailDrop.failed**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      failed?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **PassFailDrop.dropped**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      dropped?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **PassFailDrop.total**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      total?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **PassFailDrop.courseSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseSubject: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **PassFailDrop.courseCrse**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseCrse: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **PassFailDrop.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **PassFailDrop.semester**
      * - `Semester` in database
      * - `NOT NULL`, no default
      */
      semester: Semester | db.Parameter<Semester> | db.SQLFragment;
      /**
      * **PassFailDrop.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **PassFailDrop.failed**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      failed: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **PassFailDrop.dropped**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      dropped: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **PassFailDrop.total**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      total: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **PassFailDrop.courseSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseSubject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **PassFailDrop.courseCrse**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseCrse?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **PassFailDrop.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **PassFailDrop.semester**
      * - `Semester` in database
      * - `NOT NULL`, no default
      */
      semester?: Semester | db.Parameter<Semester> | db.SQLFragment | db.SQLFragment<any, Semester | db.Parameter<Semester> | db.SQLFragment>;
      /**
      * **PassFailDrop.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **PassFailDrop.failed**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      failed?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **PassFailDrop.dropped**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      dropped?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **PassFailDrop.total**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      total?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'PassFailDrop_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Section**
   * - Table in database
   */
  export namespace Section {
    export type Table = 'Section';
    export interface Selectable {
      /**
      * **Section.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **Section.courseId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseId: string;
      /**
      * **Section.crn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      crn: string;
      /**
      * **Section.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section: string;
      /**
      * **Section.cmp**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      cmp: string;
      /**
      * **Section.minCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      minCredits: number;
      /**
      * **Section.maxCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      maxCredits: number;
      /**
      * **Section.time**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      time: db.JSONValue;
      /**
      * **Section.totalSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      totalSeats: number;
      /**
      * **Section.takenSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      takenSeats: number;
      /**
      * **Section.availableSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      availableSeats: number;
      /**
      * **Section.fee**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      fee: number;
      /**
      * **Section.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt: Date;
      /**
      * **Section.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt: Date | null;
      /**
      * **Section.room**
      * - `text` in database
      * - Nullable, no default
      */
      room: string | null;
      /**
      * **Section.buildingName**
      * - `text` in database
      * - Nullable, no default
      */
      buildingName: string | null;
      /**
      * **Section.locationType**
      * - `LocationType` in database
      * - `NOT NULL`, default: `'PHYSICAL'::"LocationType"`
      */
      locationType: LocationType;
    }
    export interface JSONSelectable {
      /**
      * **Section.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **Section.courseId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseId: string;
      /**
      * **Section.crn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      crn: string;
      /**
      * **Section.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section: string;
      /**
      * **Section.cmp**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      cmp: string;
      /**
      * **Section.minCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      minCredits: number;
      /**
      * **Section.maxCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      maxCredits: number;
      /**
      * **Section.time**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      time: db.JSONValue;
      /**
      * **Section.totalSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      totalSeats: number;
      /**
      * **Section.takenSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      takenSeats: number;
      /**
      * **Section.availableSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      availableSeats: number;
      /**
      * **Section.fee**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      fee: number;
      /**
      * **Section.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt: db.TimestampString;
      /**
      * **Section.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt: db.TimestampString | null;
      /**
      * **Section.room**
      * - `text` in database
      * - Nullable, no default
      */
      room: string | null;
      /**
      * **Section.buildingName**
      * - `text` in database
      * - Nullable, no default
      */
      buildingName: string | null;
      /**
      * **Section.locationType**
      * - `LocationType` in database
      * - `NOT NULL`, default: `'PHYSICAL'::"LocationType"`
      */
      locationType: LocationType;
    }
    export interface Whereable {
      /**
      * **Section.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.courseId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.crn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      crn?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.cmp**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      cmp?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.minCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      minCredits?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.maxCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      maxCredits?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.time**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      time?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.totalSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      totalSeats?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.takenSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      takenSeats?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.availableSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      availableSeats?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.fee**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      fee?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.room**
      * - `text` in database
      * - Nullable, no default
      */
      room?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.buildingName**
      * - `text` in database
      * - Nullable, no default
      */
      buildingName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Section.locationType**
      * - `LocationType` in database
      * - `NOT NULL`, default: `'PHYSICAL'::"LocationType"`
      */
      locationType?: LocationType | db.Parameter<LocationType> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, LocationType | db.Parameter<LocationType> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Section.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **Section.courseId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Section.crn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      crn: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Section.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Section.cmp**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      cmp: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Section.minCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      minCredits: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Section.maxCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      maxCredits: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Section.time**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      time: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **Section.totalSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      totalSeats: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Section.takenSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      takenSeats: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Section.availableSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      availableSeats: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Section.fee**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      fee: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Section.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **Section.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Section.room**
      * - `text` in database
      * - Nullable, no default
      */
      room?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Section.buildingName**
      * - `text` in database
      * - Nullable, no default
      */
      buildingName?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Section.locationType**
      * - `LocationType` in database
      * - `NOT NULL`, default: `'PHYSICAL'::"LocationType"`
      */
      locationType?: LocationType | db.Parameter<LocationType> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Section.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **Section.courseId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      courseId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Section.crn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      crn?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Section.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Section.cmp**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      cmp?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Section.minCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      minCredits?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Section.maxCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      maxCredits?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Section.time**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      time?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **Section.totalSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      totalSeats?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Section.takenSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      takenSeats?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Section.availableSeats**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      availableSeats?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Section.fee**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      fee?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Section.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Section.deletedAt**
      * - `timestamp` in database
      * - Nullable, no default
      */
      deletedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Section.room**
      * - `text` in database
      * - Nullable, no default
      */
      room?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Section.buildingName**
      * - `text` in database
      * - Nullable, no default
      */
      buildingName?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Section.locationType**
      * - `LocationType` in database
      * - `NOT NULL`, default: `'PHYSICAL'::"LocationType"`
      */
      locationType?: LocationType | db.Parameter<LocationType> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, LocationType | db.Parameter<LocationType> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Section_courseId_section_key' | 'Section_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **TransferCourse**
   * - Table in database
   */
  export namespace TransferCourse {
    export type Table = 'TransferCourse';
    export interface Selectable {
      /**
      * **TransferCourse.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **TransferCourse.fromCollege**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCollege: string;
      /**
      * **TransferCourse.fromCollegeState**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCollegeState: string;
      /**
      * **TransferCourse.fromCRSE**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCRSE: string;
      /**
      * **TransferCourse.fromSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromSubject: string;
      /**
      * **TransferCourse.fromCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      fromCredits: number;
      /**
      * **TransferCourse.toCRSE**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      toCRSE: string;
      /**
      * **TransferCourse.toSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      toSubject: string;
      /**
      * **TransferCourse.toCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      toCredits: number;
      /**
      * **TransferCourse.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **TransferCourse.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt: Date;
    }
    export interface JSONSelectable {
      /**
      * **TransferCourse.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **TransferCourse.fromCollege**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCollege: string;
      /**
      * **TransferCourse.fromCollegeState**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCollegeState: string;
      /**
      * **TransferCourse.fromCRSE**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCRSE: string;
      /**
      * **TransferCourse.fromSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromSubject: string;
      /**
      * **TransferCourse.fromCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      fromCredits: number;
      /**
      * **TransferCourse.toCRSE**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      toCRSE: string;
      /**
      * **TransferCourse.toSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      toSubject: string;
      /**
      * **TransferCourse.toCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      toCredits: number;
      /**
      * **TransferCourse.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **TransferCourse.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **TransferCourse.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransferCourse.fromCollege**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCollege?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransferCourse.fromCollegeState**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCollegeState?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransferCourse.fromCRSE**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCRSE?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransferCourse.fromSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromSubject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransferCourse.fromCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      fromCredits?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransferCourse.toCRSE**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      toCRSE?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransferCourse.toSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      toSubject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransferCourse.toCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      toCredits?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransferCourse.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransferCourse.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **TransferCourse.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **TransferCourse.fromCollege**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCollege: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **TransferCourse.fromCollegeState**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCollegeState: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **TransferCourse.fromCRSE**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCRSE: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **TransferCourse.fromSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromSubject: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **TransferCourse.fromCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      fromCredits: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **TransferCourse.toCRSE**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      toCRSE: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **TransferCourse.toSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      toSubject: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **TransferCourse.toCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      toCredits: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **TransferCourse.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **TransferCourse.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **TransferCourse.id**
      * - `text` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **TransferCourse.fromCollege**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCollege?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **TransferCourse.fromCollegeState**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCollegeState?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **TransferCourse.fromCRSE**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromCRSE?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **TransferCourse.fromSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      fromSubject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **TransferCourse.fromCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      fromCredits?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **TransferCourse.toCRSE**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      toCRSE?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **TransferCourse.toSubject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      toSubject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **TransferCourse.toCredits**
      * - `float8` in database
      * - `NOT NULL`, no default
      */
      toCredits?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **TransferCourse.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **TransferCourse.updatedAt**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updatedAt?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'TransferCourse.id_unique' | 'TransferCourse_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = _InstructorToSection.Table | _prisma_migrations.Table | Building.Table | Course.Table | Instructor.Table | PassFailDrop.Table | Section.Table | TransferCourse.Table;
    export type Selectable = _InstructorToSection.Selectable | _prisma_migrations.Selectable | Building.Selectable | Course.Selectable | Instructor.Selectable | PassFailDrop.Selectable | Section.Selectable | TransferCourse.Selectable;
    export type JSONSelectable = _InstructorToSection.JSONSelectable | _prisma_migrations.JSONSelectable | Building.JSONSelectable | Course.JSONSelectable | Instructor.JSONSelectable | PassFailDrop.JSONSelectable | Section.JSONSelectable | TransferCourse.JSONSelectable;
    export type Whereable = _InstructorToSection.Whereable | _prisma_migrations.Whereable | Building.Whereable | Course.Whereable | Instructor.Whereable | PassFailDrop.Whereable | Section.Whereable | TransferCourse.Whereable;
    export type Insertable = _InstructorToSection.Insertable | _prisma_migrations.Insertable | Building.Insertable | Course.Insertable | Instructor.Insertable | PassFailDrop.Insertable | Section.Insertable | TransferCourse.Insertable;
    export type Updatable = _InstructorToSection.Updatable | _prisma_migrations.Updatable | Building.Updatable | Course.Updatable | Instructor.Updatable | PassFailDrop.Updatable | Section.Updatable | TransferCourse.Updatable;
    export type UniqueIndex = _InstructorToSection.UniqueIndex | _prisma_migrations.UniqueIndex | Building.UniqueIndex | Course.UniqueIndex | Instructor.UniqueIndex | PassFailDrop.UniqueIndex | Section.UniqueIndex | TransferCourse.UniqueIndex;
    export type Column = _InstructorToSection.Column | _prisma_migrations.Column | Building.Column | Course.Column | Instructor.Column | PassFailDrop.Column | Section.Column | TransferCourse.Column;
  
    export type AllBaseTables = [_InstructorToSection.Table, _prisma_migrations.Table, Building.Table, Course.Table, Instructor.Table, PassFailDrop.Table, Section.Table, TransferCourse.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [_InstructorToSection.Table, _prisma_migrations.Table, Building.Table, Course.Table, Instructor.Table, PassFailDrop.Table, Section.Table, TransferCourse.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "_InstructorToSection": _InstructorToSection.Selectable;
    "_prisma_migrations": _prisma_migrations.Selectable;
    "Building": Building.Selectable;
    "Course": Course.Selectable;
    "Instructor": Instructor.Selectable;
    "PassFailDrop": PassFailDrop.Selectable;
    "Section": Section.Selectable;
    "TransferCourse": TransferCourse.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "_InstructorToSection": _InstructorToSection.JSONSelectable;
    "_prisma_migrations": _prisma_migrations.JSONSelectable;
    "Building": Building.JSONSelectable;
    "Course": Course.JSONSelectable;
    "Instructor": Instructor.JSONSelectable;
    "PassFailDrop": PassFailDrop.JSONSelectable;
    "Section": Section.JSONSelectable;
    "TransferCourse": TransferCourse.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "_InstructorToSection": _InstructorToSection.Whereable;
    "_prisma_migrations": _prisma_migrations.Whereable;
    "Building": Building.Whereable;
    "Course": Course.Whereable;
    "Instructor": Instructor.Whereable;
    "PassFailDrop": PassFailDrop.Whereable;
    "Section": Section.Whereable;
    "TransferCourse": TransferCourse.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "_InstructorToSection": _InstructorToSection.Insertable;
    "_prisma_migrations": _prisma_migrations.Insertable;
    "Building": Building.Insertable;
    "Course": Course.Insertable;
    "Instructor": Instructor.Insertable;
    "PassFailDrop": PassFailDrop.Insertable;
    "Section": Section.Insertable;
    "TransferCourse": TransferCourse.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "_InstructorToSection": _InstructorToSection.Updatable;
    "_prisma_migrations": _prisma_migrations.Updatable;
    "Building": Building.Updatable;
    "Course": Course.Updatable;
    "Instructor": Instructor.Updatable;
    "PassFailDrop": PassFailDrop.Updatable;
    "Section": Section.Updatable;
    "TransferCourse": TransferCourse.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "_InstructorToSection": _InstructorToSection.UniqueIndex;
    "_prisma_migrations": _prisma_migrations.UniqueIndex;
    "Building": Building.UniqueIndex;
    "Course": Course.UniqueIndex;
    "Instructor": Instructor.UniqueIndex;
    "PassFailDrop": PassFailDrop.UniqueIndex;
    "Section": Section.UniqueIndex;
    "TransferCourse": TransferCourse.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "_InstructorToSection": _InstructorToSection.Column;
    "_prisma_migrations": _prisma_migrations.Column;
    "Building": Building.Column;
    "Course": Course.Column;
    "Instructor": Instructor.Column;
    "PassFailDrop": PassFailDrop.Column;
    "Section": Section.Column;
    "TransferCourse": TransferCourse.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "_InstructorToSection": _InstructorToSection.SQL;
    "_prisma_migrations": _prisma_migrations.SQL;
    "Building": Building.SQL;
    "Course": Course.SQL;
    "Instructor": Instructor.SQL;
    "PassFailDrop": PassFailDrop.SQL;
    "Section": Section.SQL;
    "TransferCourse": TransferCourse.SQL;
  }[T];

}
